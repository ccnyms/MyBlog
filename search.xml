<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>（一）JavaScript 基础知识</title>
    <url>/2019/07/03/%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><ol>
<li>Mosaic 是互联网历史上第一个获普遍使用和能够显示图片的网页浏览器。于 1993 年问世。</li>
<li>浏览器组成：<ul>
<li>shell （外形）部分</li>
<li>内核部分：渲染引擎（语法规则和渲染），js 引擎，其他模块</li>
</ul>
</li>
<li>主流浏览器及其内核：<ul>
<li>IE             -&gt;       Trident</li>
<li>Chrome      -&gt;      Blink</li>
<li>Opera       -&gt;      Blink</li>
<li>Safari      -&gt;      Webkit</li>
<li>Firefox     -&gt;      Gecko</li>
</ul>
</li>
<li>2001 年的 IE6 浏览器，首次实现对 JavaScript 引擎的优化和分离。</li>
<li>2008 年 Google 发布最新浏览器 Chrome，它是采用优化后的 JavaScript 引擎，引擎代号 V8，因能把 JavaScript 代码直接转化为机械码来执行，进而以速度快而闻名。</li>
</ol>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ol>
<li><p>程序设计语言分为解释型和编译型两大类。</p>
<ul>
<li>C 或 C++ 等语言需要一个编译器（compiler）。编译器是一种程序，能够把用 Java 等高级语言编写出来的源代码翻译为直接在计算机上执行的文件。</li>
<li>解释型程序设计语言不需要编译器，它们只需要解释器。对于 JavaScript，浏览器负责完成有关的解释和执行工作。</li>
</ul>
</li>
<li><p>特点：</p>
<ul>
<li>解释型语言 — （不需要编译成文件）跨平台。</li>
<li><strong>单线程</strong> — 同一时间只能干一件事。</li>
<li>弱类型语言 — 存放的数据类型可变。</li>
</ul>
</li>
<li><p>我们把 JavaScript 中的<strong>核心部分称为 ECMAScript</strong>，加上 BOM（浏览器对象模型）与 DOM（文档对象类型），三者共同组成了 JavaScript。</p>
<ul>
<li>ECMA-262 标准规定了这门语言的如下组成部分：语法、类型、语句、关键字、保留字、操作符、对象。</li>
<li>浏览器对象模型（BOM，Browser Object Model），提供与浏览器交互的方法和接口。</li>
<li>文档对象内容（DOM，Document Object Model），提供访问和操作网页内容的方法和接口。</li>
</ul>
</li>
<li><p><strong>异步（asynchronous）：同时执行</strong>，类似于有很多条路一起走，可以同时出发。</p>
</li>
<li><p><strong>同步（synchronous）：分次执行</strong>，类似于只有一条路走，这个走完了下个才能走。</p>
</li>
<li><p>JavaScript 执行队列 -&gt; 执行过程：轮转时间片。</p>
<ul>
<li><strong>单线程模拟多线程。</strong></li>
<li>类似吃饭，吃一口米饭，吃一口茄子，再吃一口排骨，再吃一口米饭，再吃一口米饭，再吃一口茄子，顺序完全随机，在足够快的时间内，肉眼可见菜和饭在同时减少。</li>
<li>比如 js 引擎要执行任务 1 和任务 2，js 引擎会把任务 1 和任务 2 切成无数个片段，然后把这些片段<strong>随机排成一个队列送入引擎执行</strong>，直到被执行完。</li>
</ul>
</li>
<li><p><strong>JavaScript 可正常计算的范围：小数点前 16 位，后 16 位。</strong></p>
</li>
<li><p>JS 计算精度不准，是纯粹的 bug，所以在 JS 中应尽量避免小数操作。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">0.14</span> * <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// 14.000000000000002</span></span><br></pre></td></tr></table></figure></li>
<li><p>如果需要计算，那么采用<code>Math.floor()</code>（向下取整）或<code>Math.ceil()</code>（向上取整）方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 向上取整，无论小数是多少，都向前进 1</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="built_in">Math</span>.ceil(<span class="number">123.234</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// 124</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 向下取整，无论小数是多少，都不要了</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="built_in">Math</span>.floor(<span class="number">123.999</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num1); <span class="comment">// 123</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>Math.random()</code>方法可以随机产生一个 0 ～ 1 之间的开区间的数。</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="built_in">Math</span>.random();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// 0.4322440432127299</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// 0.5216225452503296</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>toFixed()</code>方法可以把 Number 四舍五入为指定小数位数的数字。</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">123.45678</span>;</span><br><span class="line">   </span><br><span class="line">demo = num.toFixed(<span class="number">2</span>);</span><br><span class="line">   </span><br><span class="line"><span class="built_in">console</span>.log(demo); <span class="comment">// 123.46</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>引入 JavaScript：</p>
<ul>
<li>页面内嵌<code>&lt;script&gt;&lt;/script&gt;</code>标签</li>
<li>外部引入<code>&lt;script src=location&gt;&lt;/script&gt;</code></li>
</ul>
</li>
<li><p>页面中，可以存在多个<code>&lt;script&gt;</code>标签，执行顺序从上到下。只要不存在 defer 和 async 属性，浏览器都会按照 它们在页面中出现的先后顺序依次进行解析。</p>
</li>
<li><p>注意，如果有外部 js 文件，那么这个 script 标签里如果再写 js 代码，也是不会执行的，会被直接忽略。基于这个特性，在开发时偶尔会用来存储一些代码。</p>
</li>
<li><p>在下面再写一个 script 标签，然后里面写代码是可以的。</p>
</li>
<li><p>传统的做法是所有<code>&lt;script&gt;</code>标签都放在<code>&lt;head&gt;</code>中，这意味着必须等到全部 js 代码都被下载、解析和执行完成以后，才能开始呈现页面的内容（浏览器在遇到<code>&lt;body&gt;</code>标签时才开始呈现内容）。</p>
</li>
<li><p>为了避免这个问题，现代 Web 应用程序一般都把全部 js 引用放在<code>&lt;body&gt;</code>中页面内容的后面。这样，在解析包含的 js 代码之前，页面的内容将完全呈现在浏览器中。而用户也会因为浏览器窗口显示空白页面的时间缩短而感到打开页面的速度加快了。</p>
</li>
<li><p>为符合 Web 标准中结构、样式、行为相分离的原则，通常会采用外部引入。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/02/26/hello-world/</url>
    <content><![CDATA[<p>Welcome to Hexo! </p>
<a id="more"></a>
<p>This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>（二）变量、值类型、语句基本规则</title>
    <url>/2019/07/05/%E4%BA%8C%E3%80%81%E5%8F%98%E9%87%8F%E3%80%81%E5%80%BC%E7%B1%BB%E5%9E%8B%E3%80%81%E8%AF%AD%E5%8F%A5%E5%9F%BA%E6%9C%AC%E8%A7%84%E5%88%99/</url>
    <content><![CDATA[<h2 id="变量（variable）"><a href="#变量（variable）" class="headerlink" title="变量（variable）"></a>变量（variable）</h2><h3 id="变量声明："><a href="#变量声明：" class="headerlink" title="变量声明："></a>变量声明：</h3><ol>
<li>声明、赋值分解<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li>
<li>单一 var<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>,</span><br><span class="line">    b = <span class="number">2</span>;</span><br></pre></td></tr></table></figure></li>
<li>开发规范：单一 var 模式，每个变量用逗号隔开，同时换行。</li>
<li>命名规则：<ul>
<li>变量名必须以<code>英文字母</code>、<code>_</code>、<code>$</code>开头</li>
<li>变量名可以包括<code>英文字母</code>、<code>_</code>、<code>$</code>、<code>数字</code></li>
<li>不可以用系统的关键字、保留字作为变量名。</li>
</ul>
</li>
</ol>
<h2 id="值类型：原始值与引用值"><a href="#值类型：原始值与引用值" class="headerlink" title="值类型：原始值与引用值"></a>值类型：原始值与引用值</h2><h3 id="原始值"><a href="#原始值" class="headerlink" title="原始值"></a>原始值</h3><ol>
<li>不可改变， 存储在 stack（栈）：先进的后出来。</li>
<li>五大值类型：<ul>
<li>Number — 数字</li>
<li>Boolean — 布尔</li>
<li>String — 字符串</li>
<li>undefined — 未定义（未被赋值的变量值输出时会有这个结果）</li>
<li>null — 空（可以用来占位）</li>
</ul>
</li>
</ol>
<h3 id="引用值"><a href="#引用值" class="headerlink" title="引用值"></a>引用值</h3><ol>
<li>存储在 heap（堆）：怎么进的怎么出。</li>
<li>值类型：<ul>
<li>Array — 数组</li>
<li>Object — 对象</li>
<li>Function — 函数</li>
<li>RegExp — 正则</li>
<li>Date — 日期</li>
</ul>
</li>
</ol>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ol>
<li><p><strong>原始值和引用值唯一的不同是赋值形式不同</strong>。</p>
</li>
<li><p>原始值以值的拷贝方式赋值，原值是不可变的。操作都在副本上。引用值以引用的拷贝方式赋值，原值是可变的。引用的是地址，操作还是在原来的地方，除非换一个地址（赋新值）。</p>
</li>
<li><p><strong>原始值一旦赋值，不可更改。无论是原值增删，还是新的赋值，都会直接存放到新的地方，原值不动</strong>。在操作上，表现为原始值和对应栈名复制一份到新的地方，同时之前的对应栈名初始化，值不动，增删和新赋值都在副本上进行。如：</p>
<ul>
<li>在栈内存中声明一个叫 num 的房间，放入值 1</li>
<li>在栈内存中声明一个叫 num1 的房间，拷贝 num 的值 1 放入 num1</li>
<li>将 num 及其值 1 拷贝到一个新的房间，然后修改值为 2，原来的房间名初始化为 1005，原值 1 依然留在该房间，不会发生变化</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>,</span><br><span class="line">      num1 = num;</span><br><span class="line">num = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num1); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>引用值赋值之后，如果是在原值上增删，会直接修改原值。如果是新的赋值，就会直接存放到新的地方，原值不动。</strong></p>
</li>
<li><p>原值增删：</p>
<ul>
<li>在栈内存中声明一个叫 arr 的房间，在堆内存中一个房间里放入值 [1, 2]，然后 arr 房间内放入这个值的==堆内存地址==<code>heap1001</code></li>
<li>在栈内存中声明一个叫 arr1 的房间，然后直接拷贝 arr 房间内存放的地址<code>heap1001</code>，获得 arr 的值</li>
<li>此时 arr 与 arr1 指向同一个值的地址<code>heap1001</code></li>
<li>arr 增加新值 3，直接在<code>heap1001</code>存放的值里增加，变为 [1, 2, 3]</li>
<li>此时 arr 与 arr1 共同指向的值变为 [1, 2, 3]</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">   arr1 = arr;</span><br><span class="line">arr.push(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(arr1); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>赋新值：</p>
<ul>
<li>在栈内存中声明一个叫 arr 的房间，在堆内存中一个房间里放入值 [1, 2]，然后 arr 房间内放入堆内存地址<code>heap1001</code></li>
<li>在栈内存中声明一个叫 arr1 的房间，然后直接拷贝 arr 房间内存放的地址，获得 arr 的值</li>
<li>此时 arr 与 arr1 指向同一个值的地址<code>heap1001</code></li>
<li>arr 赋新值，在堆内存中另一个房间里放入新值 [1, 2, 3]，然后 arr 房间内删除原来的地址<code>heap1001</code>，放入这个新值的堆内存地址<code>heap1002</code></li>
<li>此时 arr 指向的值为 [1, 2, 3]，arr1 指向的值为 [1, 2]</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>],</span><br><span class="line">   arr1 = arr;</span><br><span class="line">arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">document</span>.write(arr1); <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="JS-语句基本规则"><a href="#JS-语句基本规则" class="headerlink" title="JS 语句基本规则"></a>JS 语句基本规则</h2><ol>
<li>语句后面要用分号<code>;</code>结束。注意，下列三种语句不用加分号：<ul>
<li>函数： function test() {}</li>
<li>for 循环：for() {}</li>
<li>if 语句：if() {}</li>
</ul>
</li>
<li>一个 HTML 文件中可以放多个 JS 代码块，代码块内的规则可以互通。如果某个代码块内出现 JS 语法错误，会引发该代码块内的后续代码终止，但不会影响其他 JS 代码块，目前有两种错误：<ul>
<li>低级错误：语法解析错误，整个代码块都不会执行。<br>如：使用了中文标点符号：Uncaught Syntax Error: ……</li>
<li>逻辑错误：标准错误，会执行到该代码块最后一行正确代码再终止。<br>如：没有声明变量，直接使用：Uncaught Reference Error: ……</li>
</ul>
</li>
<li>书写格式要规范，<code>=</code> <code>+</code> <code>/</code> <code>-</code>两边都应该有空格。</li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>（三）运算符、语句、编程形式</title>
    <url>/2019/07/07/%E4%B8%89%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81%E8%AF%AD%E5%8F%A5%E3%80%81%E7%BC%96%E7%A8%8B%E5%BD%A2%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><ol>
<li><p><code>+</code>：数学运算；字符串连接：<strong>任何数据类型加字符串都等于字符串</strong>。</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 从左至右运算</span></span><br><span class="line"><span class="comment">// 1+1 数字运算，得 2</span></span><br><span class="line"><span class="comment">// 2+'a' 字符串连接，得 2a</span></span><br><span class="line"><span class="comment">// '2a'+1 字符串连接，得 2a1</span></span><br><span class="line"><span class="comment">// 同理可得 2a11</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="number">1</span> + <span class="number">1</span> + <span class="string">'a'</span> + <span class="number">1</span> + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 2a11</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>-</code>、<code>*</code>、<code>/</code>、<code>%</code>、<code>=</code>、<code>()</code></p>
</li>
<li><p><code>+=</code>、<code>-=</code>、<code>/=</code>、<code>*=</code>、<code>%=</code></p>
</li>
<li><p><code>++</code>。<strong>先加加（减减）还是后加加（减减）是针对当前语句来说的</strong>。<code>++</code>放后面，意为先执行该条语句，然后再加加。<code>++</code>放前面，意为先加加，然后再执行该条语句。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a++); <span class="comment">// 10</span></span><br><span class="line"><span class="comment">// 意为先执行 console.log(a)，执行完后 a++</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//此时再看 a 的值，就是加完之后的了</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 11</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> b = ++a - <span class="number">1</span> + a++; </span><br><span class="line"></span><br><span class="line"><span class="comment">// ++a 先加后执行，10 + 1 = 11，a 的值变为 11</span></span><br><span class="line"><span class="comment">// a++ 先执行后加，a 现在的值为 11 ，故 a++ = 11</span></span><br><span class="line"><span class="comment">// b = 11 - 1 + 11 = 21</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">// 21</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// a 两次自增，故值为 12</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">// 12</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>--</code>。注意：<strong>有前自增（自减）操作符时，要先加加（减减），再执行该条语句</strong>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = a-- + --a; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 先算 --a，先减后执行，a = 1，自减后 a = 0</span></span><br><span class="line"><span class="comment">// 再算 a--，先执行后减，a = 0，故 a-- = 0</span></span><br><span class="line"><span class="comment">// b = 0 + 0 = 0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// a 两次自减，故值为 -1</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">// -1</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><ol>
<li><p><code>&gt;</code>、<code>&lt;</code>、<code>==</code>、<code>&gt;=</code>、<code>&lt;=</code>、<code>!=</code></p>
</li>
<li><p>比较结果为 boolean 值：true / false。</p>
</li>
<li><p>注意，<code>==</code>是等于，而<code>=</code>是赋值。</p>
</li>
<li><p><strong>字符串的比较规则为 asc 码</strong>。如“A”的 asc 码为 65 ，“a”的 asc 码为 97。</p>
</li>
<li><p>字符串比较是按照顺序来的，如果运算符左边的字符串中顺位第一的字符小于右边字符串的第一位字符，那么左边直接就是小于右边；如果第一位相等，那就再看第二位。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 读作字符串一零 &gt; 字符串二</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="string">'10'</span> &gt; <span class="string">'2'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串‘1’的 asc 码为 49</span></span><br><span class="line"><span class="comment">// 字符串‘2’的 asc 码为 50</span></span><br><span class="line"><span class="comment">// 字符串‘3’的 asc 码为 51</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = <span class="string">'3'</span> &gt; <span class="string">'20'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ol>
<li><p><code>&amp;&amp;</code>、<code>||</code>、<code>!</code></p>
</li>
<li><p>运算结果为真实的值</p>
</li>
<li><p>下面六个值转化为布尔值都是 false：<code>undefined、null、NaN、&quot;&quot;、0、flase</code>。其中 <strong>NaN(Not a Number)：非数，是数字类型的一类值，意为不可表示的值。</strong></p>
</li>
<li><p>注意：<code>&amp;&amp;</code>在运行时，<strong>在碰到表达式的布尔值为假时，返回该表达式的值</strong>。</p>
<ul>
<li><p>多个表达式时，先看第一个表达式转换成布尔值的结果，若结果为真，接着看第二个表达式的布尔值，若第二个也为真，接着看第三个，依此类推，直到表达式的布尔值为 false，直接返回该表达式的值。即<strong>看到假，返回假</strong>。如果全为真，则返回最后一个表达式的值。</p>
</li>
<li><p>只有两个表达式时，若第一个表达式的布尔值为 true，返回第二个表达式的值。若第一个表达式为 false，直接返回第一个表达式原本的值。即<strong>一真返二</strong>。一假返一。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span> &amp;&amp; <span class="number">2</span>;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 1 转化为 true，判断为真</span></span><br><span class="line"><span class="comment">// 第一个为 true，直接返回第二个表达式的值</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>基于<code>&amp;&amp;</code>运算符的原理， 使它具备中断的作用，在实际开发中作为<strong>短路语句</strong>使用，它是 if 语句的简写形式，可以用来替代 if 语句：“如果…是真/假，那么…”</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> &amp;&amp; <span class="built_in">document</span>.write(<span class="string">'a'</span>); <span class="comment">// 不会输出 a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果前面的数据正确，那么执行后面的语句</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span> &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">console</span>.log(<span class="string">'团子很可爱'</span>); <span class="comment">// 团子很可爱</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>||</code>与<code>&amp;&amp;</code>类似，只不过是<strong>碰到表达式的布尔值为真时，返回该表达式的值</strong>。</p>
<ul>
<li>多个表达式时，若第一个为假，则一直往下看，直到找到为真的表达式，然后返回该值。即<strong>看到真，返回真</strong>。如果全为假，则返回最后一个表达式的值。</li>
<li>两个表达式时，若第一个为假，直接返回第二个表达式的值。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1</span> || <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>!</code>将表达式转换成布尔值再取反，然后输出布尔值。 </p>
</li>
</ol>
<h3 id="其他：逗号运算符"><a href="#其他：逗号运算符" class="headerlink" title="其他：逗号运算符"></a>其他：逗号运算符</h3><ol>
<li><p>形式：(表达式1，表达式2，表达式3………….)</p>
</li>
<li><p>作用：通常与小括号<code>()</code>一起使用，逗号<code>,</code>用于连接算式</p>
</li>
<li><p>运算规则：对每个操作对象求值（从左至右），返回最后一个操作对象的值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>,</span><br><span class="line">    b = <span class="number">20</span>,</span><br><span class="line">    result = (a++, a + b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log (result); <span class="comment">// 31 </span></span><br><span class="line"><span class="built_in">console</span>.log (a); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log (b); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>查询<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence" target="_blank" rel="noopener">运算符优先级</a>。</p>
</li>
</ol>
<h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><h3 id="if-条件语句"><a href="#if-条件语句" class="headerlink" title="if 条件语句"></a>if 条件语句</h3><ol>
<li><code>if (条件判断) {执行语句}</code></li>
<li><code>if () {} else if () {}</code></li>
<li><code>if () {}</code>&lt;—&gt; <code>&amp;&amp;</code>转换</li>
</ol>
<h3 id="for-循环语句"><a href="#for-循环语句" class="headerlink" title="for 循环语句"></a>for 循环语句</h3><ol>
<li><p>for 循环执行顺序：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//	   (1)	   (2)    (4)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>);            <span class="comment">// (3)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;                       <span class="comment">// (1)</span></span><br><span class="line"><span class="keyword">for</span> (; i &lt; <span class="number">10</span>; ) &#123;               <span class="comment">// (2)</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>);            <span class="comment">// (3)</span></span><br><span class="line">    i++;                         <span class="comment">// (4)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>先执行一遍 (1) ：<code>var i = 0</code></li>
<li>判断 (2) -&gt; 执行语句 (3)：<code>if(i &lt; 10){console.log(&#39;a&#39;);}</code></li>
<li>执行 (4)：<code>i++ -&gt; i = 1</code></li>
<li>判断 (2) -&gt; 执行语句 (3)</li>
<li>执行 (4)：<code>i++ -&gt; i = 2</code></li>
<li>判断 (2) -&gt; 执行语句 (3)</li>
<li>执行 (4)：<code>i++ -&gt; i = 3</code></li>
<li>注意：<strong>无论 for 语句中写的是什么，都会按照这个执行顺序执行。</strong></li>
</ul>
</li>
<li><p>while</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>do while（很少用）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line">    i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt; <span class="number">10</span>)</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h3 id="switch-语句"><a href="#switch-语句" class="headerlink" title="switch 语句"></a>switch 语句</h3><ol>
<li><p>格式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (条件) &#123;</span><br><span class="line">    <span class="keyword">case</span> 结果<span class="number">1</span>:                        <span class="comment">// 结果与条件进行判断（比对）</span></span><br><span class="line">        执行语句;                      <span class="comment">// 满足即执行该语句</span></span><br><span class="line">        <span class="keyword">break</span>;                       <span class="comment">// 执行后结束</span></span><br><span class="line">    <span class="keyword">case</span> 结果<span class="number">2</span>: </span><br><span class="line">        执行语句;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 结果<span class="number">3</span>: </span><br><span class="line">        执行语句;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        执行语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>switch 的条件和 case 的结果比对，如果是一样的，就执行</strong>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="built_in">window</span>.prompt(<span class="string">'input'</span>);</span><br><span class="line"><span class="keyword">switch</span> (date) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'monday'</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'tuesday'</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'wednesday'</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'thursday'</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'friday'</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'working'</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'周六'</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'周日'</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'relaxing'</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>当 case 的结果是表达式时，比较的就是表达式的返回值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">28</span>,</span><br><span class="line">    greeting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (<span class="literal">true</span>) &#123;              		    <span class="comment">// 条件</span></span><br><span class="line">    <span class="keyword">case</span> age &lt; <span class="number">18</span>:              	    <span class="comment">// 结果1</span></span><br><span class="line">        greeting = <span class="string">'同学'</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> age &gt;= <span class="number">18</span> &amp;&amp; age &lt; <span class="number">40</span>: 		    <span class="comment">// 结果2</span></span><br><span class="line">        greeting = <span class="string">'先生'</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> age &gt;= <span class="number">40</span>:</span><br><span class="line">        greeting = <span class="string">'前辈'</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">        greeting = <span class="string">'你好'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(greeting); <span class="comment">// '先生'</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><ol>
<li><p>break：终止循环。注意，<strong>必须写在循环里面，写在外面会报错</strong>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">    sum += i;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">    <span class="keyword">if</span> (sum &gt; <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">// 这个 break 能执行是因为最外有一层 for 循环，如果只有 if 语句，是肯定报错的</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>continue：终止本次循环，直接进行下一次循环。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">7</span> === <span class="number">0</span> || i % <span class="number">10</span> === <span class="number">7</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h2 id="编程形式"><a href="#编程形式" class="headerlink" title="编程形式"></a>编程形式</h2><ol>
<li>面向过程：C</li>
<li>面向对象：Java、C++</li>
<li>既面向对象也面向过程：JavaScript </li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>（五）函数</title>
    <url>/2019/07/20/%E4%BA%94%E3%80%81%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ol>
<li>函数主要用于减少重复代码。</li>
<li>在 JavaScript 中，函数是头等对象，因为它们可以像任何其他对象一样具有属性和方法。它们与其他对象的区别在于函数可以被调用。简而言之，它们是<code>Function</code>对象。</li>
<li>定义一个函数并不会自动的执行它。定义了函数仅仅是赋予函数以名称并明确函数被调用时该做些什么。调用函数才会以给定的参数真正执行这些动作。</li>
</ol>
<h2 id="两种定义形式"><a href="#两种定义形式" class="headerlink" title="两种定义形式"></a>两种定义形式</h2><ol>
<li><p>函数声明</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名 (<span class="params">参数<span class="number">1</span>, 参数<span class="number">2</span>, 参数<span class="number">3</span>, ...</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 函数体;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>函数表达式</p>
<ul>
<li>命名函数表达式：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="function"><span class="keyword">function</span> 函数名(<span class="params">参数<span class="number">1</span>, 参数<span class="number">2</span>, 参数<span class="number">3</span>, ...</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 函数体;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数名仅用作函数名称，并不执行，也不一定要和变量名一样</span></span><br><span class="line"><span class="comment">// 变量名.name = 函数名</span></span><br></pre></td></tr></table></figure>

<ul>
<li>匿名函数表达式 — 常用，故后续直接叫函数表达式：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="function"><span class="keyword">function</span>(<span class="params">参数<span class="number">1</span>, 参数<span class="number">2</span>, 参数<span class="number">3</span>, ...</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 函数体;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 变量名.name = 函数名</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>关于函数名和变量名：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span> <span class="title">fnName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(test.name); <span class="comment">// fnName</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> demo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(demo.name); <span class="comment">// demo</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>表达式的值就是函数本身。函数表达式就是创建一个函数，将其赋值给变量，用<code>变量名()</code>来调用。函数是一个引用类型，将其赋值给某个变量时，变量中保存的是函数的地址。</p>
</li>
<li><p>注意：命名函数表达式的识别名（也就是上例的函数名），它的作用域只能在函数的主体(FunctionBody)内部，<strong>真正的函数识别名称是被赋值的那个变量识别名</strong>（也就是变量名）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span>(foo); </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(foo)); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(f()); <span class="comment">// function</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="组成形式"><a href="#组成形式" class="headerlink" title="组成形式"></a>组成形式</h2><ol>
<li><p>函数名称。</p>
</li>
<li><p>参数：不限制数据类型、不限制参数多少。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a + b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="number">1</span>, <span class="number">2</span>);<span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// test -&gt; 函数名称</span></span><br><span class="line"><span class="comment">// a,b -&gt; 形式参数</span></span><br><span class="line"><span class="comment">// 1,2 -&gt; 实际参数</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>形式参数：相当于 var 声明变量。<code>形参长度 = 函数名.length</code></p>
</li>
<li><p>实际参数：实际参数列表 arguments，类似数组，会将所有实际参数存储起来。</p>
</li>
<li><p>在形式参数和实际参数长度完全相等的时候，<code>arguments</code>和实际参数有一个==映射规则==，如果<code>arguments</code>内的参数发生变化，相应的实际参数也会改变。反之同理。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实参改变，arguments 内的参数也随之改变</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    a = <span class="number">4</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]); <span class="comment">// 4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// arguments 内参数改变，实参也随之改变</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">arguments</span>[<span class="number">0</span>] = <span class="number">4</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// 4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>arguments</code>一开始有多少位参数，就会一直保持这个长度，如果实参数量小于形参，后续增加的实际参数不会添到列表里，即此时不会存在映射关系。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    b = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">1</span>]); <span class="comment">// undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>返回值：需要函数有返回值的时候，可以在函数体里使用<code>return</code>语句。<strong><code>return</code>既可以终止函数，还可以得到函数返回值。</strong></p>
<ul>
<li>终止函数：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 终止函数，console.log('b'); 不会被执行</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'a'</span>); <span class="comment">// a</span></span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'b'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>函数返回值：将一个值返回到函数外面。记得要找一个变量接收它。这个时候既终止了函数，又得到了函数返回值。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myNumber</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> +target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = myNumber(<span class="string">'123'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num), num); <span class="comment">// number 123</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>注意，如果<code>return</code>后面不跟任何数据，或者函数中没有 <code>return</code>语句，则该函数会在末尾自动 return undefined。如果找一个变量接收它，就会得到 undefined 的结果。</p>
</li>
</ol>
<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><ol>
<li><p>递归只是让函数更加简洁，并没有减少响应时间，所以特别复杂的程序不能使用递归。</p>
</li>
<li><p>例：写一个函数，实现斐波那契数列（1、1、2、3、5、8……）。</p>
<ol>
<li><p>找规律：<code>fb(n) = fb(n - 1) + fb(n - 2);</code></p>
<ul>
<li>发现可以采用递归 -&gt; return 公式：<code>return fb(n - 1) + fb(n - 2);</code></li>
<li>测试公式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fb(<span class="number">5</span>) =&gt; fb(<span class="number">4</span>) + fb(<span class="number">3</span>);</span><br><span class="line">fb(<span class="number">4</span>) =&gt; fb(<span class="number">3</span>) + fb(<span class="number">2</span>);</span><br><span class="line">fb(<span class="number">3</span>) =&gt; fb(<span class="number">2</span>) + fb(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>找出口：<code>n === 1 || n === 2</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fb</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n === <span class="number">1</span> || n === <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fb(n - <span class="number">1</span>) + fb(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result = fb(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ol>
<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>每个函数都是一个对象，对象中有些属性我们可以访问，有些不可以。这些不可访问的属性仅供 JS 引擎存取，<code>[[scope]]</code>就是其中一个。<strong><code>[[scope]]</code>指的就是我们所说的作用域，其中存储了运行期（执行期）上下文的集合</strong>。</p>
<h3 id="执行期上下文"><a href="#执行期上下文" class="headerlink" title="执行期上下文"></a>执行期上下文</h3><p>当函数执行时，会创建一个称为执行期上下文的内部对象（AO）。一个执行期上下文定义了一个函数执行时的环境，函数==每次执行时对应的执行上下文都是独一无二的==，所以<strong>多次调用一个函数会导致创建多个执行上下文，当函数执行完毕，执行上下文被销毁。</strong></p>
<h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p><code>[[scope]]</code>中所存储的执行期上下文的对象的集合，这个集合呈链式链接，我们把这种链式链接叫做作用域链。</p>
<h3 id="查找变量"><a href="#查找变量" class="headerlink" title="查找变量"></a>查找变量</h3><p>在哪个函数里查找变量，就从该函数的作用域链的顶端依次向下查找。</p>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><ol>
<li><p>函数如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">        c();</span><br><span class="line">    &#125;</span><br><span class="line">    b();</span><br><span class="line">&#125;</span><br><span class="line">a();</span><br></pre></td></tr></table></figure>
</li>
<li><p>a 函数在被定义时，<code>a.[[scope]]</code>里第 0 位存储了全局的执行期上下文（GO）。</p>
</li>
<li><p>a 函数执行时，它的执行期上下文（AO）放入<code>a.[[scope]]</code>里的顶端，即第 0 位，GO 下移一位，到第 1 位。</p>
</li>
<li><p>此时若在 a 函数里查找一个变量，就需要在 a 的作用域链里查找，先在第 0 位 AO 中找，没有的话再去第 1 位 GO 中找。</p>
</li>
<li><p>而对于 a 函数中的 b 函数，==a 函数执行时，b 函数被定义==，此时 b 函数的全局执行期上下文就是 a 的作用域链，即<code>b.[[scope]] === a.[[scope]]</code>（同一个作用域链，是同一个房间内的）。</p>
</li>
<li><p>b 函数执行时，它的执行期上下文放入<code>b.[[scope]]</code>的第 0 位，原有的依次下移一位。</p>
</li>
<li><p>b 函数执行完毕后，销毁它自己的 AO（链接被砍断，也就是删除引用），b 又回到被定义状态，等待下一次被执行。</p>
</li>
<li><p>a 函数执行完毕后，销毁它自己的 AO，由于引用被删除，AO 里面的 b 函数和 c 函数都被砍断，所以这俩函数都没了。a 回到了被定义状态，等待下一次被执行。当 a 函数需要再次执行时，又会生成新的 AO（里面又会有新的 b 函数和 c 函数出现）。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">a defined（定义）    a.[[scope]] -&gt; 0 : GO</span><br><span class="line"></span><br><span class="line">a doing（执行）      a.[[scope]] -&gt; 0 : aAO</span><br><span class="line">                                   1 : GO</span><br><span class="line"></span><br><span class="line">b defined           b.[[scope]] -&gt; 0 : aAO</span><br><span class="line">                                   1 : GO</span><br><span class="line"></span><br><span class="line">b doing             b.[[scope]] -&gt; 0 : bAO</span><br><span class="line">                                   1 : aAO</span><br><span class="line">                                   2 : GO</span><br><span class="line"></span><br><span class="line">c defined           c.[[scope]] -&gt; 0 : bAO</span><br><span class="line">                                   1 : aAO</span><br><span class="line">                                   2 : GO</span><br><span class="line"></span><br><span class="line">c doing             c.[[scope]] -&gt; 0 : cAO</span><br><span class="line">                                   1 : bAO</span><br><span class="line">                                   2 : aAO</span><br><span class="line">                                   3 : GO</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意：function 是引用值，即值存储在 heap（堆），而在 stack（栈）里放的是堆地址，也就是引用。</p>
</li>
</ol>
<h2 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><ol>
<li>此类函数没有声明，在一次执行后即释放。是针对初始化功能的函数，适合做初始化工作。</li>
<li>立即执行函数和普通函数的唯一区别就在此：前者在一次执行后会释放，不能被反复调用，而普通函数会一直等待被执行。除此之外没有任何其他区别。</li>
</ol>
<h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><ol>
<li><p>第一种：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
</li>
<li><p>第二种：（W3C 建议使用）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果需要返回值：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// num 用于接收返回值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = (<span class="function"><span class="keyword">function</span> (<span class="params">形参</span>) </span>&#123;  </span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> ..;</span><br><span class="line">&#125;(实参));</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><ol>
<li><p>只有表达式才能被执行符号<code>()</code>执行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数声明：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">var</span> d = <span class="number">2</span> + <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(d);</span><br><span class="line">&#125;();</span><br><span class="line"><span class="comment">// 报错：Uncaught SyntaxError: Unexpected token )</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> d = <span class="number">2</span> + <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test();<span class="comment">// 正常执行，test 就是一个表达式</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>能被执行符号执行的表达式，函数名会被自动忽略。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>); <span class="comment">// 输出 a</span></span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(test); <span class="comment">// 输出 undefined</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>有一种情况，函数声明和执行符号在一起，执行符号内填写了实参，系统运行时不会报错，会将执行符号识别为逗号运算符和小括号一起组成的表达式，如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a, d, c, d</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(a + b + c + d);</span><br><span class="line">&#125;(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//系统会认为：</span></span><br><span class="line"><span class="comment">//这个是函数声明：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a, b, c, d</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a + b + c + d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个是表达式（逗号运算符的表现形式）：</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//最终，不会输出结果，也不会报错。</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>所以，要在函数体后面加括号就能立即调用，则这个函数必须是函数表达式，不能是函数声明。（函数声明会被 JS 解析时提升）</p>
</li>
<li><p>==()、!、+、-、= 等运算符，都可以将函数声明转换成表达式==，然后在后面加执行符号<code>()</code>，就可以变成立即执行函数。如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// () 运算符（包含着 function 的最外面那个括号）</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);   <span class="comment">// 123</span></span><br><span class="line">&#125;)(<span class="number">123</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// () 运算符（包含着 function 和执行符号的最外面那个括号）</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);   <span class="comment">// 1234</span></span><br><span class="line">&#125;(<span class="number">1234</span>));</span><br><span class="line"> </span><br><span class="line"><span class="comment">// ! 运算符</span></span><br><span class="line">! <span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);   <span class="comment">// 12345</span></span><br><span class="line">&#125;(<span class="number">12345</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// + 运算符</span></span><br><span class="line">+ <span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);   <span class="comment">// 123456</span></span><br><span class="line">&#125;(<span class="number">123456</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// - 运算符</span></span><br><span class="line">- <span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);   <span class="comment">// 1234567</span></span><br><span class="line">&#125;(<span class="number">1234567</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// = 运算符</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);   <span class="comment">// 12345678</span></span><br><span class="line">&#125;(<span class="number">12345678</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>（四）typeof、类型转换、进制</title>
    <url>/2019/07/09/%E5%9B%9B%E3%80%81typeof%E3%80%81%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E3%80%81%E8%BF%9B%E5%88%B6/</url>
    <content><![CDATA[<h2 id="typeof-操作符"><a href="#typeof-操作符" class="headerlink" title="typeof 操作符"></a>typeof 操作符</h2><ol>
<li><p>作用：区分数据类型（六种）</p>
<ul>
<li>number</li>
<li>string</li>
<li>boolean</li>
<li>undefined</li>
<li>object（泛指引用值，数组 array 和 null 都属于此类）</li>
<li>function  </li>
</ul>
</li>
<li><p>原始值：<code>number/string/boolean/undefined/null</code></p>
</li>
<li><p>引用值：<code>array/object/function</code></p>
</li>
<li><p><strong>null 最初是作为代替空对象的形式出现（给对象占位），所以它的数据类型是 object</strong></p>
</li>
<li><p>写法：<code>typeof()</code> 或者 <code>typeof 内容</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num)); <span class="comment">// function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mul = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> mul); <span class="comment">// object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(arr)); <span class="comment">// objcet</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>注意：</p>
<ul>
<li><p>任何变量未经声明就使用的话，会直接报错。</p>
</li>
<li><p>如果放入 typeof 操作符中，不会报错，会直接返回<code>undefined</code>。</p>
</li>
<li><p>这个返回值<code>undefined</code>的类型是字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(a),<span class="keyword">typeof</span>(<span class="keyword">typeof</span>(a))); <span class="comment">// undefined string</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>任何情况下，返回的六种类型的值都是字符串类型。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'abc'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(str), <span class="keyword">typeof</span>(<span class="keyword">typeof</span>(str))); <span class="comment">// string string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bool = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(bool), <span class="keyword">typeof</span>(<span class="keyword">typeof</span>(bool))); <span class="comment">// boolean string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">7</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num), <span class="keyword">typeof</span>(<span class="keyword">typeof</span>(num))); <span class="comment">// number string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> obj, <span class="keyword">typeof</span>(<span class="keyword">typeof</span> obj)); <span class="comment">// object string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> fn, <span class="keyword">typeof</span>(<span class="keyword">typeof</span> fn)); <span class="comment">// function string</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">undefined</span>, <span class="keyword">typeof</span>(<span class="keyword">typeof</span> <span class="literal">undefined</span>)); <span class="comment">// undefined string</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><h3 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h3><ol>
<li><p><strong>Number( )：将括号里的内容转换成数字/数字类型</strong>。</p>
<ul>
<li><code>undefined、字符串（除了字符串类型的数字）、NaN-&gt; NaN</code> </li>
<li><code>true -&gt; 1</code></li>
<li><code>false、&quot;&quot;、null -&gt; 0</code></li>
<li><code>&quot;123&quot; -&gt; 123（字符串类型的数字直接转换类型，数值不变）</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="built_in">Number</span>(<span class="literal">true</span>); <span class="comment">// 布尔类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num),num); <span class="comment">// number 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="built_in">Number</span>(<span class="string">'true'</span>); <span class="comment">// 字符串类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num),num); <span class="comment">// number NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">'123abc'</span>)); <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">null</span>)); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>parseInt (string, radix)：（integer：整数）</p>
<ul>
<li>第一个作用：string 参数，<strong>转换成整值</strong>（如果前面是数字，从数字位开始看，直到非数字位截止，返回数字位）</li>
<li>第二个作用：radix 进制，以此进制为基底，将值转换为十进制，取值：2～36，选填。划重点：<strong>你填的多少，进制就是多少。</strong>从你填的转为十进制。目标进制（你填写的进制） &lt;==&gt; 十进制</li>
<li>常见转换：<ul>
<li><code>&quot;123.7&quot;-&gt; 123</code> </li>
<li><code>&quot;123abc&quot; -&gt; 123（首位是数字的话，从数字位开始看，在非数字位截断）</code></li>
<li><code>其他 -&gt; NaN</code></li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="built_in">parseInt</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + <span class="string">': '</span> + num); <span class="comment">// number: NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">'123.9'</span>)); <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">'123abc'</span>)); <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="built_in">parseInt</span>(<span class="string">'abc123'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + <span class="string">': '</span> + num); <span class="comment">// number: NaN</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="built_in">parseInt</span>(<span class="string">'a'</span>,<span class="number">16</span>); <span class="comment">// a 目前为十六进制数，要转化为十进制数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + <span class="string">': '</span> + num); <span class="comment">// number: 10</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>parseFloat(string)：类似 parseInt 方法，转换成浮点数（正常的小数）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="built_in">parseFloat</span>(<span class="string">'123.45'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + <span class="string">': '</span> + num); <span class="comment">// number: 123.45</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="built_in">parseFloat</span>(<span class="string">'123.45abc'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + <span class="string">': '</span> + num); <span class="comment">// number: 123.45</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="built_in">parseFloat</span>(<span class="string">'abc123.45'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + <span class="string">': '</span> + num); <span class="comment">// number : NaN</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>参数.toString(radix)：将参数转换成字符串</p>
<ul>
<li>radix 进制，以十进制为基底，转换成填写的进制，选填。<br>十进制&lt;==&gt;目标进制（你填写的进制）划重点：<strong>你填的多少，就是想要多少</strong>。从十进制转为你填的。</li>
<li><strong>undefined 和 null 不能用该方法</strong>，使用会直接报错（因为它俩没有原型，而其他原始值经过包装类后成为原始值对象，都有原型）</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> demo = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> num = demo.toString();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + <span class="string">': '</span> + num); <span class="comment">// string: 123</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> demo = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> num = demo.toString(<span class="number">16</span>);<span class="comment">// 10 目前为十进制数，要转化为十六进制</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + <span class="string">': '</span> + num); <span class="comment">// string: a</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意：如果直接使用<code>123.toString()</code>是不可以的，会直接报错。因为系统会首先将这个语句识别为浮点型，数学计算的点<code>.</code>优先级最高，所以识别成浮点数，小数点后是字母是肯定报错的。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">123.</span>toString();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// 报错，Uncaught SyntaxError: Invalid or unexpected token</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>String( )：将括号里的内容转换成字符串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="built_in">String</span>(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + <span class="string">': '</span> + num); <span class="comment">// string: 123</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="built_in">String</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num)+<span class="string">': '</span>+num); <span class="comment">// string: true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Boolean( )：转换成布尔值</p>
<ul>
<li>undefined / null / NaN / “” / 0 / flase  -&gt; false </li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="built_in">Boolean</span>(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + <span class="string">': '</span> + num); <span class="comment">// boolean: false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="built_in">Boolean</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + <span class="string">': '</span> + num); <span class="comment">// boolean: false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="built_in">Boolean</span>(<span class="string">'0'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + <span class="string">': '</span> + num); <span class="comment">// boolean: true</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="隐式"><a href="#隐式" class="headerlink" title="隐式"></a>隐式</h3><ol>
<li><p>内部原理：调用显示类型转换。原理：调用 Number( ) 方法转为数字，然后和 NaN 比对。</p>
</li>
<li><p><code>isNaN()</code> ：判断参数是不是 NaN，返回结果为 boolean 类型。常用转换：NaN / undefined / 字符串（除了字符串类型的数字） -&gt; NaN</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">NaN</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="number">123</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="string">'123'</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="string">'aa'</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">undefined</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">null</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>++/--</code>、<code>+/-</code>（一元正负）：转换为 number 类型。原理：调用 Number( )。一元正负，只有一边有参数，如”+ a” / “- b”</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'abc'</span>;</span><br><span class="line">a++;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(a), a);<span class="comment">// number NaN</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">'123'</span>;</span><br><span class="line">b++;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(b), b);<span class="comment">// number 124</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="literal">null</span>;</span><br><span class="line">c--;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(c), c);<span class="comment">// number -1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = +<span class="string">'abc'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(d), d);<span class="comment">//number NaN</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>+</code> （加号）：若加号两边存在一个字符串，将另一个也转为字符串，转为 string 类型。调用 String 方法。其他情况下（number / undefined / null / boolean），转为 number 类型。调用 Number 方法。</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span> +<span class="string">'abc'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(a), a);<span class="comment">// string 1abc</span></span><br></pre></td></tr></table></figure>

 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="literal">false</span> + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(a), a);<span class="comment">// number 1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>-、*、/、%</code>：转为 number 类型。原理：调用 Number 方法</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'1'</span> * <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(a), a);<span class="comment">// number 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="literal">null</span> / <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(b), b);<span class="comment">// number 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="string">'abc'</span> - <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(c), c);<span class="comment">// number NaN</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>&amp;&amp;、||</code>：<strong>过程中转为 boolean 类型进行比较</strong>，结果返回表达式的值（值本身是什么类型就返回什么类型）。</p>
</li>
<li><p><code>!</code>：结果返回 boolean 类型。</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="string">'abc'</span> &amp;&amp; <span class="number">2</span>; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num), num);<span class="comment">// number 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="string">'abc'</span> &amp;&amp; <span class="string">'def'</span>; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num), num);<span class="comment">// string def</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="literal">null</span> &amp;&amp; <span class="number">4</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num), num);<span class="comment">// object null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = !!<span class="string">'a'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num), num);<span class="comment">// boolean true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>&lt;、&gt;、&lt;=、&gt;=</code> ：</p>
<ul>
<li>两边都是字符串时，比较 asc 码，返回 boolean 类型。</li>
<li><strong>其他情况下，调用 Number( )，先转换为数字进行比较</strong>，结果返回 boolean 类型。</li>
<li>undefined 和 null 除外，见特殊情况。</li>
</ul>
</li>
<li><p><code>==、!=</code> ：若两边均为对象，对比它们的引用是否相同，返回 boolean 类型。其他情况下，调用 Number 方法，两边转为数字进行比较，结果返回 boolean 类型。</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引用值，两个不同的地址引用（不同房间）：</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123;&#125; == &#123;&#125;); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 同一个地址引用：</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> obj1 = obj;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj == obj1); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>特殊情况：</p>
<ul>
<li>undefined 和 null 既不大于 0，也不小于 0，更不等于 0。</li>
<li><code>undefined == null</code></li>
<li><code>NaN !== NaN</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">undefined</span> &gt; <span class="number">0</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">undefined</span> &lt; <span class="number">0</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">undefined</span> == <span class="number">0</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> &gt; <span class="number">0</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> &lt; <span class="number">0</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> == <span class="number">0</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">undefined</span> == <span class="literal">null</span>);<span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> == <span class="literal">NaN</span>);<span class="comment">// false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// false == 0, true == 1, 0 &gt; 1 -&gt; false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">false</span> &gt; <span class="literal">true</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先判断 1 &gt; 10 -&gt; false, false == 0, 0 &gt; 0 -&gt; false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> &gt; <span class="number">10</span> &gt; <span class="number">0</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 &gt; 3 -&gt; false, false == 0, 0 &lt; 1 -&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span> &gt; <span class="number">3</span> &lt; <span class="number">1</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>不发生类型转换：</p>
<ul>
<li><code>===</code></li>
<li><code>!==</code></li>
</ul>
</li>
</ol>
<h3 id="常用转换汇总"><a href="#常用转换汇总" class="headerlink" title="常用转换汇总"></a>常用转换汇总</h3><ol>
<li><p>Boolean()：undefined、null、NaN、””、0、false  -&gt; false</p>
</li>
<li><p>Number()：（千方百计变成数字）</p>
<ul>
<li>undefined / 字符串（除了字符串类型的数字）/ NaN -&gt; NaN</li>
<li>true -&gt; 1</li>
<li>false / “” / null -&gt; 0</li>
<li>“123” -&gt; 123 （字符串类型的数字直接转换类型，数值不变）</li>
</ul>
</li>
<li><p>parseInt (string, radix)：（只要整数，不管其他）</p>
<ul>
<li>“123.7” -&gt; 123</li>
<li>“123abc” -&gt; 123（首位是数字的话，从数字位开始看，在非数字位截断）</li>
<li>其他 -&gt; NaN</li>
</ul>
</li>
<li><p>例 1：关于 parseInt() 方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">parseInt</span>(<span class="string">'123abc'</span>), <span class="built_in">parseInt</span>(<span class="string">'123abc'</span>)); <span class="comment">// number 123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">'123.7'</span>)); <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">parseInt</span>(<span class="literal">undefined</span>), <span class="built_in">parseInt</span>(<span class="literal">undefined</span>)); <span class="comment">// number NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="literal">null</span>)); <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="literal">NaN</span>)); <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">'abc123'</span>)); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">''</span>)); <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="literal">true</span>)); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="literal">false</span>)); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>例 2：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="literal">false</span> + <span class="number">1</span>; </span><br><span class="line"><span class="comment">// 0 + 1</span></span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> demo = <span class="literal">false</span> == <span class="number">1</span>; </span><br><span class="line"><span class="comment">// 0 !== 1 -&gt; false</span></span><br><span class="line"><span class="built_in">console</span>.log(demo); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">11</span> + <span class="string">'11'</span> * <span class="number">2</span> == <span class="number">33</span>);<span class="comment">// true</span></span><br><span class="line"><span class="comment">//          11 + 		22</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>例 3:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(a) &amp;&amp; -<span class="literal">true</span> + (+<span class="literal">undefined</span>) + <span class="string">''</span>); <span class="comment">// 'NaN'</span></span><br><span class="line"><span class="comment">// 左边：typeof(a) -&gt; 'undefined'</span></span><br><span class="line"><span class="comment">// &amp;&amp; 优先级低于算术运算符，放在最后处理</span></span><br><span class="line"><span class="comment">// 右边：-true + (+undefined) + '' -&gt; -1 + NaN + '' -&gt; NaN + '' -&gt; 'NaN'</span></span><br><span class="line"><span class="comment">// 'undefined' &amp;&amp; 'NaN'</span></span><br><span class="line"><span class="comment">// 一真返二</span></span><br><span class="line"><span class="comment">// 'NaN'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span>(a) &amp;&amp; -<span class="literal">true</span> + (+<span class="literal">undefined</span>) + <span class="string">''</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'是否能输出'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 条件内返回的是字符串的'NaN'，为 true，可以执行</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>例 4:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">!!<span class="string">' '</span> + !!<span class="string">''</span> - !!<span class="literal">false</span> || <span class="built_in">console</span>.log(<span class="string">'能吗？'</span>);</span><br><span class="line"><span class="comment">// 左边：true + false - false -&gt; 1 + 0 - 0 = 1</span></span><br><span class="line"><span class="comment">// 1 为真，会直接返回 1，|| 后面的语句不会执行</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol>
<li>进制也就是进位计数制，是人为定义的带进位的计数方法。对于任何一种进制—— <strong>X 进制，就表示每一位置上的数运算时都是逢 X 进一位。</strong> </li>
<li>十进制是逢十进一，十六进制是逢十六进一，二进制就是逢二进一，以此类推，X 进制就是逢 X 进位。</li>
<li>比如十六进制：1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, f。如果 f + 1，那么按照逢十六进一的规则，个位数变为 0，然后向前进一位，十位数变为 1。那么：f + 1 = 10，这里的 10（一零），就代表十进制里的 16。</li>
<li>比如二进制：0, 1。如果 1 + 1，按照逢二进一的规则，个位数变为 0 ，十位数变为 1，1 + 1 = 10，这里的 10（一零），代表十进制里的 2。</li>
</ol>
<h4 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h4><ol>
<li><p>十进制 -&gt; X 进制：除。数除以 X，得商，接着用商除 X，直到商为 0，余数倒过来写。</p>
</li>
<li><p>X 进制 -&gt; 十进制：乘。从数的个位开始，依次乘以 X 的 0 次方，1 次方……，最后加起来。</p>
</li>
<li><p>十进制 -&gt; 十六进制</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">10 进制数：33</span><br><span class="line"></span><br><span class="line">33 / 16 = 2 ...... 1</span><br><span class="line"> 2 / 16 = 0 ...... 2</span><br><span class="line"></span><br><span class="line">转换成 16 进制数：21</span><br></pre></td></tr></table></figure>
</li>
<li><p>十六进制 -&gt; 十进制</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">16 进制数：21</span><br><span class="line"></span><br><span class="line">1 * 16⁰ + 2 * 16¹ = 33</span><br><span class="line"></span><br><span class="line">转换成 10 进制数：33</span><br></pre></td></tr></table></figure>
</li>
<li><p>十进制 -&gt; 八进制</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">10 进制数：19</span><br><span class="line"></span><br><span class="line">19 / 8 = 2 ...... 3</span><br><span class="line"> 2 / 8 = 0 ...... 2</span><br><span class="line"></span><br><span class="line">转换成 8 进制数：23</span><br></pre></td></tr></table></figure>
</li>
<li><p>八进制 -&gt; 十进制</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">8 进制数：23</span><br><span class="line"></span><br><span class="line">3 * 8⁰ + 2 * 8¹ = 19</span><br><span class="line"></span><br><span class="line">转换成 10 进制数：19</span><br></pre></td></tr></table></figure>
</li>
<li><p>十进制 -&gt; 二进制</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">10 进制数：46</span><br><span class="line"></span><br><span class="line">46 / 2 = 23 ...... 0</span><br><span class="line">23 / 2 = 11 ...... 1</span><br><span class="line">11 / 2 = 5  ...... 1</span><br><span class="line"> 5 / 2 = 2  ...... 1</span><br><span class="line"> 2 / 2 = 1  ...... 0</span><br><span class="line"> 1 / 2 = 0  ...... 1</span><br><span class="line"></span><br><span class="line">转换成 2 进制数：101110</span><br></pre></td></tr></table></figure>
</li>
<li><p>二进制 -&gt; 十进制</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">2 进制数：101110</span><br><span class="line"></span><br><span class="line">0 * 2⁰ + 1 * 2¹ + 1 * 2² + 1 * 2³ + 0 * 2⁴ + 1 * 2⁵ = 46</span><br><span class="line"></span><br><span class="line">转换成 10 进制数：46</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
</search>
